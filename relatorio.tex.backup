\documentclass[a4paper,10pt]{coursepaper}
\usepackage[utf8]{inputenc}
\usepackage[brazil]{babel}

%opening
\title{Comunicação entre dois computadores através de RAW Socket}
\author{Antonio Carlos Salzvedel Furtado Junior e Tiago Rodrigo Kepe}
\studentnumber{GRR20080946,GRR20084630}
\college{Universidade Federal do Paraná}
\coursename{Bacharelado em Ciência da Computação}
\coursenumber{CI058}
\coursesection{Redes I}
\instructor{Luiz Carlos Pessoa Albini}


\begin{document}

\maketitle

\section{Funcionamento}

O funcionamento de nossa rede funciona no esquema cliente-servidor. A máquina que estiver executando o servidor ficará escutando a rede,  esperando por mensagens do cliente. Quano o cliente for executado, uma espécie de Shell estará disponível para o usuário. Todos os comandos definidos na especificação estarão disponíveis, são eles:
\begin{itemize}
 \item ls [opções]
 \item cd
 \item lls [opções]
 \item lcd
 \item put
 \item get
\end{itemize}


\section{Implementação}

O envio de mensagens não é feito com janelas deslizantes, como definido na especificação. A nossa implementação baseia-se no ``Para e espera''. 

Se alguma mensagem for perdida, seja por retirada do cabo ou outro motivo, tanto servidor como cliente deverão esperar um determinado tempo (TIMEOUT) e tentarão reênviá-la até 16 vezes.

O Timeout é feito por uma função. Ela usa a função do sistema chamada select. Esta função monitora o descritor do nosso socket por um determinado período. Ela retorna positivo se alguma mensagem foi recebida durante a constante TIMEOUT definida, mesmo que seja lixo, e falso se durante este período nada foi recebido.

O campo tipo de mensagem define todos os tipos definidos na especificação. Além disso foram definidos tipos específicos para mensagens de erro, por motivo de simplicidade de implementação, são eles:
\begin{itemize}
 \item TYPE\_E1 : diretório inexistente;
 \item TYPE\_E2 : falta de permissão;
 \item TYPE\_E3 : espaço insuficiente;
 \item TYPE\_E4 : arquivo inexistente.
\end{itemize}

A paridade feita é vertical

\section{Classes}

Realizamos nosso trabalho em C++, então dividimos funções específicas para cada uma de nossas classes, são elas:
\begin{itemize}
 \item Message:
 Esta classe é responsável por definir todos os detalhes de nossas mensagens. Ela possui funções para montagem de mensagem, gerador e conferidor de paridades e deve retornar campos específicos da mensagem.
 \item Socket:
 Ela é reponsável por abrir o socket de acordo com regras do RAW SOCKET. Ele possui funções simples para envio e recebimento de mensagens simples.
 \item Control:
 Esta classe cuida de detalhes de maior abstração da rede. Ela usa a classe Socket para enviar e receber múltiplas mensagens, ela também cuida de detalhes como o TIMEOUT da rede e da seqüêncialização de mensagens. Os detalhes do para e espera são definidos aqui também.
 \item Cliente:
 Ela define o comportamento do cliente. Basicamente, é criado um shell e funções relacionadas aos comandos de especificação. Ela usa a classe Control para cuidar do resto.
 \item Servidor:
 Assim como o cliente, ela define o comportamento do servidor. Também usa a classe Control. A sua diferença é não possuir um shell, e sim uma função para escutar na rede.
\end{itemize}

\end{document}
